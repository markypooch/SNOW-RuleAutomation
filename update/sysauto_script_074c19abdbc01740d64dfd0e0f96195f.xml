<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sysauto_script">
    <sysauto_script action="INSERT_OR_UPDATE">
        <active>true</active>
        <condition/>
        <conditional>false</conditional>
        <name>NSX Firewall Import</name>
        <run_as display_value="Marcus Hansen">83fe5493dbfbba806d4676721f96191a</run_as>
        <run_as_tz/>
        <run_dayofmonth>1</run_dayofmonth>
        <run_dayofweek>1</run_dayofweek>
        <run_period/>
        <run_start>2018-02-09 02:06:59</run_start>
        <run_time>1970-01-01 19:45:00</run_time>
        <run_type>daily</run_type>
        <script><![CDATA[try
{
	var endPoint = 'https://' + gs.getProperty('x_ibmfi_ibm_automa.nsx_manager_bdr') + '/api/4.0/edges';
	var response = NSXRESTCall(endPoint, "GET", "", "", "application/json", "application/json");

	if (response.getStatusCode() == 200) {
		var xmlPayload = JSON.parse(response.getBody());
		for (var i = 0; i < xmlPayload.edgePage.data.length; i++) {
			var string = xmlPayload.edgePage.data[i].name;
			if (string.indexOf('ESG') != -1) {
					var gr = new GlideRecord('x_ibmfi_ibm_automa_nsx_firewalls');
					gr.addQuery('name', 'CONTAINS', string);
					gr.query();
				
					if (!gr.hasNext()) {
				
						var companyPrefix = xmlPayload.edgePage.data[i].name.substring(1, 3);

						var location = new GlideRecord("cmn_location");
						location.addQuery('name', '=', 'IBM Boulder');
						location.query();

						var location_sysid = '';
						if (location.next()) {
							location_sysid = location.sys_id;
						}

						var ci_gr = new GlideRecord('cmdb_ci_firewall_network');
						ci_gr.initialize();
						ci_gr.name      = xmlPayload.edgePage.data[i].name;
						ci_gr.asset_tag = xmlPayload.edgePage.data[i].nodeId;
						ci_gr.device_type = "firewall";
						ci_gr.description = companyPrefix + " NSX Virtual Firewall. Hosted at IBM Boulder.";
						ci_gr.firmware_version = xmlPayload.edgePage.data[i].apiVersion;
						ci_gr.location    = location_sysid;
						ci_gr.insert();

						var gr = new GlideRecord('x_ibmfi_ibm_automa_nsx_firewalls');
						gr.initialize();
						gr.name         = xmlPayload.edgePage.data[i].name;
						gr.vsmuuid      = xmlPayload.edgePage.data[i].vsmUuid;
						gr.node_id      = xmlPayload.edgePage.data[i].nodeId;
						gr.revision     = xmlPayload.edgePage.data[i].revision;
						gr.is_universal = xmlPayload.edgePage.data[i].isUniversal;
						gr.id           = xmlPayload.edgePage.data[i].id;
						gr.state        = xmlPayload.edgePage.data[i].state;
						gr.edge_status  = xmlPayload.edgePage.data[i].edgeStatus;
						gr.firewall_ci  = ci_gr.sys_id;
						gr.insert();
					}
				
			}
		}
	}
	
	
	//restMessage.setEndpoint('https://' + gs.getProperty('x_ibmfi_ibm_firewa.nsx_manager_bdr') + '/api/4.0/firewall/globalroot-0/config/layer3sections/1/rules/1013');
	endPoint = 'https://' + gs.getProperty('x_ibmfi_ibm_automa.nsx_manager_bdr') + '/api/4.0/firewall/globalroot-0/config';
	
	response = NSXRESTCall(endPoint, "GET", "", "", "application/json", "application/json");
    if (response.getStatusCode() == 200) {

		var jSon = JSON.parse(response.getBody());
		for (var j = 0; j < jSon.layer3Sections.layer3Sections.length; j++) {
				var gr = new GlideRecord('x_ibmfi_ibm_automa_nsx_firewall_section');
				gr.addQuery('name', 'CONTAINS', ('Boulder ' + jSon.layer3Sections.layer3Sections[j].name));
				gr.query();
				if (!gr.hasNext()) {
			
					var gr = new GlideRecord('x_ibmfi_ibm_automa_nsx_firewall_section');
					gr.initialize();
					gr.name = 'Boulder ' + jSon.layer3Sections.layer3Sections[j].name;
					gr.section_value   = jSon.layer3Sections.layer3Sections[j].id;
					gr.update();
				}
		}
	}
	
	endPoint = 'https://' + gs.getProperty('x_ibmfi_ibm_automa.nsx_manager_rtp') + '/api/4.0/edges';
	response = NSXRESTCall(endPoint, "GET", "", "", "application/json", "application/json");

	if (response.getStatusCode() == 200) {
		var xmlPayload = JSON.parse(response.getBody());
		for (var i = 0; i < xmlPayload.edgePage.data.length; i++) {
			var string = xmlPayload.edgePage.data[i].name;
			if (string.indexOf('ESG') != -1) {
				
					var gr = new GlideRecord('x_ibmfi_ibm_automa_nsx_firewalls');
					gr.addQuery('name', 'CONTAINS', string);
					gr.query();
				
					if (!gr.hasNext()) {
				
						var companyPrefix = xmlPayload.edgePage.data[i].name.substring(1, 3);

						var location = new GlideRecord("cmn_location");
						location.addQuery('name', '=', 'IBM Raleigh');
						location.query();

						var location_sysid = '';
						if (location.next()) {
							location_sysid = location.sys_id;
						}

						var ci_gr = new GlideRecord('cmdb_ci_firewall_network');
						ci_gr.initialize();
						ci_gr.name      = xmlPayload.edgePage.data[i].name;
						ci_gr.asset_tag = xmlPayload.edgePage.data[i].nodeId;
						ci_gr.device_type = "firewall";
						ci_gr.description = companyPrefix + " NSX Virtual Firewall. Hosted at IBM RTP.";
						ci_gr.firmware_version = xmlPayload.edgePage.data[i].apiVersion;
						ci_gr.location    = location_sysid;
						ci_gr.insert();

						var gr = new GlideRecord('x_ibmfi_ibm_automa_nsx_firewalls');
						gr.initialize();
						gr.name         = xmlPayload.edgePage.data[i].name;
						gr.vsmuuid      = xmlPayload.edgePage.data[i].vsmUuid;
						gr.node_id      = xmlPayload.edgePage.data[i].nodeId;
						gr.revision     = xmlPayload.edgePage.data[i].revision;
						gr.is_universal = xmlPayload.edgePage.data[i].isUniversal;
						gr.id           = xmlPayload.edgePage.data[i].id;
						gr.state        = xmlPayload.edgePage.data[i].state;
						gr.edge_status  = xmlPayload.edgePage.data[i].edgeStatus;
						gr.firewall_ci  = ci_gr.sys_id;
						gr.insert();
					}
				
			}
		}
	}
	
	//restMessage.setEndpoint('https://' + gs.getProperty('x_ibmfi_ibm_firewa.nsx_manager_bdr') + '/api/4.0/firewall/globalroot-0/config/layer3sections/1/rules/1013');
	endPoint = 'https://' + gs.getProperty('x_ibmfi_ibm_automa.nsx_manager_rtp') + '/api/4.0/firewall/globalroot-0/config';
	
    response = NSXRESTCall(endPoint, "GET", "", "", "application/json", "application/json");
    if (response.getStatusCode() == 200) {

		var jSon = JSON.parse(response.getBody());
		for (var j = 0; j < jSon.layer3Sections.layer3Sections.length; j++) {

				var gr = new GlideRecord('x_ibmfi_ibm_automa_nsx_firewall_section');
				gr.addQuery('name', 'CONTAINS', ('RTP ' + jSon.layer3Sections.layer3Sections[j].name));
				gr.query();
			
				if (!gr.hasNext()) {
			
					var gr = new GlideRecord('x_ibmfi_ibm_automa_nsx_firewall_section');
					gr.initialize();
					gr.name = 'RTP ' + jSon.layer3Sections.layer3Sections[j].name;
					gr.section_value   = jSon.layer3Sections.layer3Sections[j].id;
					gr.insert();
				}
			
		}
	}


	/*
	restMessage = new sn_ws.RESTMessageV2();
	//restMessage.setEndpoint('https://' + gs.getProperty('x_ibmfi_ibm_firewa.nsx_manager_bdr') + '/api/4.0/firewall/globalroot-0/config/layer3sections/1/rules/1013');
	restMessage.setEndpoint('https://' + gs.getProperty('x_ibmfi_ibm_firewa.nsx_manager_rtp') + '/api/4.0/edges');
	restMessage.setHttpMethod("GET");  
	restMessage.setMIDServer('BFDCDWVSNM001');  
	restMessage.setRequestHeader("content-type","application/json");  
	restMessage.setRequestHeader("accept","application/json");
	restMessage.setRequestHeader("Authorization", "Basic " + gs.getProperty('x_ibmfi_ibm_firewa.nsx_manager_cred'));
	restMessage.setEccParameter('skip_sensor', true);
	response   = restMessage.execute(); 
	
	if (response.getStatusCode() == 200) {
		var xmlPayload = JSON.parse(response.getBody());
		for (var i = 0; i < xmlPayload.edgePage.data.length; i++) {
			var string = xmlPayload.edgePage.data[i].name;
			if (string.indexOf('ESG') != -1) {

				var companyPrefix = xmlPayload.edgePage.data[i].name.substring(1, 3);
				
				var location = new GlideRecord("cmn_location");
				location.addQuery('name', '=', 'IBM Raleigh');
				location.query();
				
				var location_sysid = '';
				if (location.next()) {
					location_sysid = location.sys_id;
				}
				
				var ci_gr = new GlideRecord('cmdb_ci_firewall_network');
				ci_gr.initialize();
				ci_gr.name      = xmlPayload.edgePage.data[i].name;
				ci_gr.asset_tag = xmlPayload.edgePage.data[i].nodeId;
				ci_gr.device_type = "firewall";
				ci_gr.description = companyPrefix + " NSX Virtual Firewall. Hosted at IBM RTP.";
				ci_gr.firmware_version = xmlPayload.edgePage.data[i].apiVersion;
				ci_gr.location    = location_sysid;
				ci_gr.insert();

				var gr = new GlideRecord('x_ibmfi_ibm_firewa_nsx_firewalls');
				gr.initialize();
				gr.name         = xmlPayload.edgePage.data[i].name;
				gr.vsmuuid      = xmlPayload.edgePage.data[i].vsmUuid;
				gr.node_id      = xmlPayload.edgePage.data[i].nodeId;
				gr.revision     = xmlPayload.edgePage.data[i].revision;
				gr.is_universal = xmlPayload.edgePage.data[i].isUniversal;
				gr.id           = xmlPayload.edgePage.data[i].id;
				gr.state        = xmlPayload.edgePage.data[i].state;
				gr.edge_status  = xmlPayload.edgePage.data[i].edgeStatus;
				gr.firewall_ci  = ci_gr.sys_id;
				gr.insert();
			}
		}
	}*/
}
catch (err) {
	gs.info("MPH IBM Firewall: " + err.message);
}]]></script>
        <sys_class_name>sysauto_script</sys_class_name>
        <sys_created_by>marcus.hansen</sys_created_by>
        <sys_created_on>2018-02-09 02:07:33</sys_created_on>
        <sys_customer_update>true</sys_customer_update>
        <sys_id>074c19abdbc01740d64dfd0e0f96195f</sys_id>
        <sys_mod_count>7</sys_mod_count>
        <sys_name>NSX Firewall Import</sys_name>
        <sys_package display_value="IBM Automated Firewall Modules" source="x_ibmfi_ibm_automa">09631527dbc01740d64dfd0e0f96192d</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="IBM Automated Firewall Modules">09631527dbc01740d64dfd0e0f96192d</sys_scope>
        <sys_update_name>sysauto_script_074c19abdbc01740d64dfd0e0f96195f</sys_update_name>
        <sys_updated_by>marcus.hansen</sys_updated_by>
        <sys_updated_on>2018-02-12 06:59:05</sys_updated_on>
        <upgrade_safe>false</upgrade_safe>
    </sysauto_script>
</record_update>
