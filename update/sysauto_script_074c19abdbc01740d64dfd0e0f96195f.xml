<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sysauto_script">
    <sysauto_script action="INSERT_OR_UPDATE">
        <active>true</active>
        <condition/>
        <conditional>false</conditional>
        <name>NSX Firewall Import</name>
        <run_as display_value="">83fe5493dbfbba806d4676721f96191a</run_as>
        <run_as_tz/>
        <run_dayofmonth>1</run_dayofmonth>
        <run_dayofweek>1</run_dayofweek>
        <run_period/>
        <run_start>2018-02-09 02:06:59</run_start>
        <run_time>1970-01-01 19:45:00</run_time>
        <run_type>daily</run_type>
        <script><![CDATA[function parseFirewallOutput(xmlPayload) {
	var string = xmlPayload.edgePage.data[i].name;

	//Only grab edge devices whose name strings contain 'ESG'
	if (string.indexOf('ESG') != -1) {

		//get a handle to our table
		var gr = new GlideRecord('x_ibmfi_ibm_automa_nsx_firewalls');
		gr.addQuery('name', 'CONTAINS', string);
		gr.query();

		if (!gr.hasNext()) {

			var ci_gr = new GlideRecord('cmdb_ci_firewall_network');
			ci_gr.initialize();
			ci_gr.name      = xmlPayload.edgePage.data[i].name;
			ci_gr.asset_tag = xmlPayload.edgePage.data[i].nodeId;
			ci_gr.device_type = "firewall";
			ci_gr.description = companyPrefix + " NSX Virtual Firewall. Hosted at IBM Boulder.";
			ci_gr.firmware_version = xmlPayload.edgePage.data[i].apiVersion;
			ci_gr.insert();

			gr.initialize();
			gr.name         = xmlPayload.edgePage.data[i].name;
			gr.vsmuuid      = xmlPayload.edgePage.data[i].vsmUuid;
			gr.node_id      = xmlPayload.edgePage.data[i].nodeId;
			gr.revision     = xmlPayload.edgePage.data[i].revision;
			gr.is_universal = xmlPayload.edgePage.data[i].isUniversal;
			gr.id           = xmlPayload.edgePage.data[i].id;
			gr.state        = xmlPayload.edgePage.data[i].state;
			gr.edge_status  = xmlPayload.edgePage.data[i].edgeStatus;
			gr.firewall_ci  = ci_gr.sys_id;
			gr.insert();
		}

	}
}

function parseSectionOutput(jSon) {
	var gr = new GlideRecord('x_ibmfi_ibm_automa_nsx_firewall_section');
	gr.addQuery('name', 'CONTAINS', (jSon.layer3Sections.layer3Sections[j].name));
	gr.query();
	if (!gr.hasNext()) {

		gr.initialize();
		gr.name = 'Boulder ' + jSon.layer3Sections.layer3Sections[j].name;
		gr.section_value   = jSon.layer3Sections.layer3Sections[j].id;
		gr.update();
	}
}

try
{
	//setup our endpoint, and issue a get to the api endpoint to procure the virtual edges
	var endPoint = 'https://' + gs.getProperty('x_ibmfi_ibm_automa.nsx_manager_bdr') + '/api/4.0/edges';
	var response = NSXRESTCall(endPoint, "GET", "", "", "application/json", "application/json");

	//if the request was successful, parse through the response body
	if (response.getStatusCode() == 200) {
		
		//parse the payload to a JSON object
		var xmlPayload = JSON.parse(response.getBody());
		for (var i = 0; i < xmlPayload.edgePage.data.length; i++) {
		    parseFirewallOutput(xmlPayload);
		}
	}
	
	endPoint = 'https://' + gs.getProperty('x_ibmfi_ibm_automa.nsx_manager_bdr') + '/api/4.0/firewall/globalroot-0/config';
	response = NSXRESTCall(endPoint, "GET", "", "", "application/json", "application/json");
    if (response.getStatusCode() == 200) {

		var jSon = JSON.parse(response.getBody());
		for (var j = 0; j < jSon.layer3Sections.layer3Sections.length; j++) {
			parseSectionOutput(jSon);
		}
	}
	
	//setup our endpoint, and issue a get to the api endpoint to procure the virtual edges
	var endPoint = 'https://' + gs.getProperty('x_ibmfi_ibm_automa.nsx_manager_rtp') + '/api/4.0/edges';
	var response = NSXRESTCall(endPoint, "GET", "", "", "application/json", "application/json");

	//if the request was successful, parse through the response body
	if (response.getStatusCode() == 200) {
		
		//parse the payload to a JSON object
		var xmlPayload = JSON.parse(response.getBody());
		for (var i = 0; i < xmlPayload.edgePage.data.length; i++) {
		    parseFirewallOutput(xmlPayload);
		}
	}
	
	endPoint = 'https://' + gs.getProperty('x_ibmfi_ibm_automa.nsx_manager_rtp') + '/api/4.0/firewall/globalroot-0/config';
	response = NSXRESTCall(endPoint, "GET", "", "", "application/json", "application/json");
    if (response.getStatusCode() == 200) {

		var jSon = JSON.parse(response.getBody());
		for (var j = 0; j < jSon.layer3Sections.layer3Sections.length; j++) {
			parseSectionOutput(jSon);
		}
	}
}
catch (err) {
	gs.info("MPH IBM Firewall: " + err.message);
}]]></script>
        <sys_class_name>sysauto_script</sys_class_name>
        <sys_created_by>marcus.hansen</sys_created_by>
        <sys_created_on>2018-02-09 02:07:33</sys_created_on>
        <sys_customer_update>true</sys_customer_update>
        <sys_id>074c19abdbc01740d64dfd0e0f96195f</sys_id>
        <sys_mod_count>9</sys_mod_count>
        <sys_name>NSX Firewall Import</sys_name>
        <sys_package display_value="IBM Automated Firewall Modules" source="x_ibmfi_ibm_automa">09631527dbc01740d64dfd0e0f96192d</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="IBM Automated Firewall Modules">09631527dbc01740d64dfd0e0f96192d</sys_scope>
        <sys_update_name>sysauto_script_074c19abdbc01740d64dfd0e0f96195f</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-03-09 22:28:25</sys_updated_on>
        <upgrade_safe>false</upgrade_safe>
    </sysauto_script>
</record_update>
